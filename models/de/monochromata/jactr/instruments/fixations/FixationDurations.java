package de.monochromata.jactr.instruments.fixations;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Collection;
import java.util.function.Consumer;
import java.util.function.Supplier;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jactr.core.model.IModel;
import org.jactr.core.runtime.ACTRRuntime;

import de.monochromata.jactr.instruments.AbstractInstrument;
import de.monochromata.jactr.remma.Fixation;
import de.monochromata.jactr.remma.IREMMA;
import de.monochromata.jactr.remma.REMMAAdapter;

/**
 * Logs fixation durations generated by {@link IREMMA} along with information
 * about the fixations input into {@link IREMMA}.
 */
public class FixationDurations extends AbstractInstrument {

	private static final transient Log LOGGER = LogFactory.getLog(FixationDurations.class);
	
	public static final String GENERATED_FIXATIONS_LOG_FILE_NAME = "generatedFixationsLogFileName";
	public static final String LOG_SEPARATOR = "logSeparator";

	private PrintWriter logWriter;
	private String separator;
	private LoggingListener listener;

	protected PrintWriter getLogWriter(String logFileName) {
		return getLogWriter(logFileName,
				() -> { return logWriter; },
				writer -> { logWriter = writer; });
	}
	
	protected String getSeparator() {
		if(separator == null) {
			separator = getParameter(LOG_SEPARATOR);
		}
		return separator;
	}
	
	@Override
	protected Collection<String> createPossibleParameters() {
		return Arrays.asList(new String[] {
				GENERATED_FIXATIONS_LOG_FILE_NAME,
				LOG_SEPARATOR
		});
	}	
	
	// IInstrument implementation

	@Override
	public void install(IModel model) {
		IREMMA remma = (IREMMA)model.getModule(IREMMA.class);
		listener = createListener();
		remma.addListener(listener);
	}

	protected LoggingListener createListener() {
		String logFileName = getParameter(GENERATED_FIXATIONS_LOG_FILE_NAME);
		return new LoggingListener(getLogWriter(logFileName), getSeparator());
	}

	@Override
	public void uninstall(IModel model) {
		IREMMA remma = (IREMMA)model.getModule(IREMMA.class);
		remma.removeListener(listener);
		listener.flush();
		listener = null;
		logWriter.flush();
		logWriter.close();
		logWriter = null;
	}

	@Override
	public void initialize() {
	}

	protected static class LoggingListener extends REMMAAdapter {
		
		protected final PrintWriter writer;
		protected final String separator;
		
		protected LoggingListener(PrintWriter writer, String separator) {
			this.writer = writer;
			this.separator = separator;
		}

		@Override
		public void fixationFinished(Fixation fixation, double start,
				double end) {
			long generatedDurationMs = (long)((end-start)*1000);
			long generatedVsRecordedMs = generatedDurationMs-fixation.getDurationMs();
			logDuration(LOGGER, "", fixation,
					fixation.getStartTimestampMs(), fixation.getDurationMs(),
					start, generatedDurationMs, generatedVsRecordedMs);
		}
		
		protected void logDuration(Log logger, String additionalInfo, Fixation fixation,
				long empiricalStartMs, long empiricalDurationMs,
				double generatedStartS, long generatedDurationMs,
				long generatedVsEmpiricalDurationMs) {
			String message = fixation.getGroup()
					+separator+fixation.getTrialId()
					+separator+fixation.getPageId()
					+separator+fixation.getCondition()
					+separator+fixation.getNumber()
					+additionalInfo
					+separator+fixation.getFoveatedWord().getUri()
					+separator+fixation.getFoveatedWord().getLine()
					+separator+fixation.getFoveatedWord().getColumn()
					+separator+fixation.getFoveatedWord().getLength()
					+separator+fixation.getFoveatedWord().getWord()
					+separator+fixation.getFoveatedWord().getAbsoluteCenterX()
					+separator+fixation.getFoveatedWord().getAbsoluteCenterY()
					+separator+empiricalStartMs
					+separator+empiricalDurationMs
					+separator+generatedStartS
					+separator+generatedDurationMs
					+separator+generatedVsEmpiricalDurationMs;
			try {
				writer.println(message);
			} finally {
				if(writer.checkError())
					logger.error("There was an error while writing \""+message
							+"\" to the log of generated fixations");
			}			
		}
		
		protected void flush() {
		}

	}

}
